// Cr√©ez ce fichier: diagnostic.js
// Ex√©cutez avec: node diagnostic.js

const fs = require('fs');
const path = require('path');

// Fonction pour analyser un fichier de routes
function analyzeRouteFile(filePath) {
  console.log(`\nüîç Analyse de: ${filePath}`);
  
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const lines = content.split('\n');
    
    lines.forEach((line, index) => {
      // Rechercher les d√©finitions de routes
      const routeMatch = line.match(/router\.(get|post|put|delete|patch)\s*\(\s*['"`]([^'"`]+)['"`]/);
      
      if (routeMatch) {
        const method = routeMatch[1];
        const route = routeMatch[2];
        
        console.log(`  Ligne ${index + 1}: ${method.toUpperCase()} ${route}`);
        
        // V√©rifier les patterns probl√©matiques
        if (route.includes('::')) {
          console.log(`    ‚ùå ERREUR: Deux points doubles dans "${route}"`);
        }
        if (route.includes('/:') && route.indexOf(':', route.indexOf('/:') + 2) !== -1) {
          console.log(`    ‚ùå ERREUR: Param√®tres malform√©s dans "${route}"`);
        }
        if (route.includes('*:') || route.includes(':*')) {
          console.log(`    ‚ùå ERREUR: Wildcard mal plac√© dans "${route}"`);
        }
        if (route.match(/:[^a-zA-Z]/)) {
          console.log(`    ‚ùå ERREUR: Param√®tre invalide dans "${route}"`);
        }
        if (route.includes('/:)') || route.includes(':/)')) {
          console.log(`    ‚ùå ERREUR: Parenth√®se mal plac√©e dans "${route}"`);
        }
      }
    });
  } catch (error) {
    console.log(`    ‚ùå Erreur de lecture: ${error.message}`);
  }
}

// Analyser tous les fichiers de routes
const routesDir = './routes';

console.log('üöÄ DIAGNOSTIC DES ROUTES EXPRESS\n');

if (fs.existsSync(routesDir)) {
  const files = fs.readdirSync(routesDir);
  
  files.forEach(file => {
    if (file.endsWith('.routes.js') || file.endsWith('.route.js')) {
      const filePath = path.join(routesDir, file);
      analyzeRouteFile(filePath);
    }
  });
} else {
  console.log('‚ùå Dossier ./routes non trouv√©');
}

// Analyser app.js aussi
if (fs.existsSync('./app.js')) {
  analyzeRouteFile('./app.js');
}

console.log('\n‚úÖ Diagnostic termin√©\n');

// Proposer des corrections automatiques
console.log('üîß CORRECTIONS SUGG√âR√âES:');
console.log('1. V√©rifiez que tous les param√®tres commencent par ":" suivi d\'un nom valide');
console.log('2. Pas de caract√®res sp√©ciaux apr√®s ":" sauf pour les param√®tres optionnels (?)');
console.log('3. L\'ordre des routes est important - placez les routes sp√©cifiques avant les g√©n√©riques');
console.log('4. Exemple correct: router.get("/:id", handler)');
console.log('5. Exemple incorrect: router.get("/::", handler)\n');