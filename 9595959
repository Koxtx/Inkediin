import React, { useState, useEffect, useMemo } from "react";
import SearchBar from "./components/SearchBar";
import FilterPanel from "./components/FilterPanel";
import ArtistsGrid from "./components/ArtistsGrid";
import LoadingSpinner from "./components/LoadingSpinner";
import ErrorMessage from "./components/ErrorMessage";
import { getTattooers, calculateDistance } from "../../api/auth.api";
import { useNavigate } from "react-router-dom";

// Constantes des filtres inline
const categories = [
  "Tous",
  "Flash",
  "Réaliste",
  "Old School",
  "Géométrique",
  "Japonais",
  "Tribal",
  "Minimaliste",
  "Blackwork",
  "Watercolor",
  "Neo-traditionnel",
  "Biomécanique",
];

const locations = [
  "Toutes",
  "Paris",
  "Lyon",
  "Marseille",
  "Bordeaux",
  "Lille",
  "Toulouse",
  "Strasbourg",
  "Nantes",
  "Montpellier",
  "Nice",
];

const experienceLevels = [
  "Tous",
  "Junior (0-3 ans)",
  "Intermédiaire (3-7 ans)",
  "Expert (7+ ans)",
];

export default function Homepage() {
  const [showFilters, setShowFilters] = useState(false);
   const navigate = useNavigate();

  // Hook useArtistsData inline
  const [artists, setArtists] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchArtists = async () => {
    setLoading(true);
    setError(null);

    const result = await getTattooers();

    if (result.success) {
      setArtists(result.data);
    } else {
      setError(result.message);
    }

    setLoading(false);
  };

  useEffect(() => {
    fetchArtists();
  }, []);

  const refetch = fetchArtists;

  // Hook useGeolocation inline
  const [userLocation, setUserLocation] = useState(null);
  const [isLocating, setIsLocating] = useState(false);
  const [isNearbyMode, setIsNearbyMode] = useState(false);

  const getUserLocation = () => {
    setIsLocating(true);
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          setUserLocation({ latitude, longitude });
          setIsNearbyMode(true);
          setIsLocating(false);
        },
        (error) => {
          console.error("Erreur de géolocalisation:", error);
          alert(
            "Impossible d'obtenir votre position. Veuillez vérifier vos paramètres de localisation."
          );
          setIsLocating(false);
          setIsNearbyMode(false);
        }
      );
    } else {
      alert("La géolocalisation n'est pas supportée par votre navigateur.");
      setIsLocating(false);
      setIsNearbyMode(false);
    }
  };

  const disableNearbyMode = () => {
    setIsNearbyMode(false);
    setUserLocation(null);
  };

  const toggleLocationMode = () => {
    if (isNearbyMode) {
      disableNearbyMode();
    } else {
      getUserLocation();
    }
  };

  // Hook useArtistsFilter inline
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("Tous");
  const [selectedLocation, setSelectedLocation] = useState("Toutes");
  const [selectedExperience, setSelectedExperience] = useState("Tous");
  const [minPrice, setMinPrice] = useState(0);
  const [maxPrice, setMaxPrice] = useState(500);
  const [locationRadius, setLocationRadius] = useState(20);

  const filteredArtists = useMemo(() => {
    if (artists.length === 0) return [];

    let results = [...artists];

    // Si mode "autour de moi" est activé, calculer les distances
    if (isNearbyMode && userLocation) {
      results = results.map((artist) => {
        const distance = calculateDistance(
          userLocation.latitude,
          userLocation.longitude,
          artist.latitude,
          artist.longitude
        );
        return { ...artist, distance };
      });

      // Filtrer par rayon de distance
      results = results.filter((artist) => artist.distance <= locationRadius);
    }

    // Filtre par recherche (nom)
    if (searchTerm) {
      results = results.filter((artist) =>
        artist.name.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    // Filtre par catégorie (style)
    if (selectedCategory !== "Tous") {
      results = results.filter((artist) => {
        if (!artist.styles) return false;
        const artistStyles = artist.styles
          .split(",")
          .map((s) => s.trim().toLowerCase());
        return artistStyles.some(
          (style) =>
            style.includes(selectedCategory.toLowerCase()) ||
            selectedCategory.toLowerCase().includes(style)
        );
      });
    }

    // Filtre par localisation (si pas en mode "autour de moi")
    if (selectedLocation !== "Toutes" && !isNearbyMode) {
      results = results.filter((artist) =>
        artist.location.toLowerCase().includes(selectedLocation.toLowerCase())
      );
    }

    // Filtre par expérience
    if (selectedExperience !== "Tous") {
      results = results.filter(
        (artist) => artist.experience === selectedExperience
      );
    }

    // Filtre par prix
    results = results.filter(
      (artist) => artist.price >= minPrice && artist.price <= maxPrice
    );

    // Si en mode "autour de moi", trier par distance
    if (isNearbyMode) {
      results.sort((a, b) => a.distance - b.distance);
    }

    return results;
  }, [
    artists,
    searchTerm,
    selectedCategory,
    selectedLocation,
    selectedExperience,
    minPrice,
    maxPrice,
    isNearbyMode,
    userLocation,
    locationRadius,
  ]);

  const resetFilters = () => {
    setSearchTerm("");
    setSelectedCategory("Tous");
    setSelectedLocation("Toutes");
    setSelectedExperience("Tous");
    setMinPrice(0);
    setMaxPrice(500);
  };

  // Gestionnaires d'événements
  const handleContact = (artist) => {
    console.log("Contacter", artist.name);
    // Logique de contact
  };

 const handleViewProfile = (artistId) => {
    console.log("🎯 Navigation vers profil avec ID:", artistId);
    navigate(`/profil/${artistId}`); // Utilisation de navigate au lieu de window.location.href
  };

  const handleResetFilters = () => {
    resetFilters();
    // Autres actions de reset si nécessaire
  };

  // Affichage conditionnel
  if (loading) {
    return <LoadingSpinner message="Chargement des artistes..." />;
  }

  if (error) {
    return <ErrorMessage error={error} onRetry={refetch} />;
  }



  return (
    <div className="container mx-auto px-4 sm:px-6 py-8">
      <h2 className="text-xl sm:text-2xl lg:text-3xl font-bold mb-5">
        Découvrez les artistes
      </h2>

      <SearchBar
        searchTerm={searchTerm}
        setSearchTerm={setSearchTerm}
        isNearbyMode={isNearbyMode}
        isLocating={isLocating}
        onLocationToggle={toggleLocationMode}
        showFilters={showFilters}
        setShowFilters={setShowFilters}
      />

      <div className="flex flex-col lg:flex-row gap-6">
        <FilterPanel
          showFilters={showFilters}
          selectedCategory={selectedCategory}
          setSelectedCategory={setSelectedCategory}
          selectedLocation={selectedLocation}
          setSelectedLocation={setSelectedLocation}
          selectedExperience={selectedExperience}
          setSelectedExperience={setSelectedExperience}
          minPrice={minPrice}
          setMinPrice={setMinPrice}
          maxPrice={maxPrice}
          setMaxPrice={setMaxPrice}
          isNearbyMode={isNearbyMode}
          locationRadius={locationRadius}
          setLocationRadius={setLocationRadius}
          onResetFilters={handleResetFilters}
          categories={categories}
          locations={locations}
          experienceLevels={experienceLevels}
        />

        <ArtistsGrid
          filteredArtists={filteredArtists}
          artists={artists}
          isNearbyMode={isNearbyMode}
          onContact={handleContact}
          onViewProfile={handleViewProfile}
          onResetFilters={handleResetFilters}
          loading={loading}
        />
      </div>
    </div>
  );
}

import React, { useState, useEffect, useContext } from "react";
import { useParams, Link } from "react-router-dom";
import { AuthContext } from "../../context/AuthContext";
import { getTattooerById } from "../../api/auth.api";
import { Edit } from "lucide-react";
import toast from "react-hot-toast";

// Import des composants
import ProfileHeader from "./components/ProfileHeader";
import ProfileAvatar from "./components/ProfileAvatar";
import ProfileBio from "./components/ProfileBio";
import ProfileActions from "./components/ProfileActions";
import ProfileStats from "./components/ProfileStats";
import ProfileSpecialties from "./components/ProfileSpecialties";
import ProfileTabs from "./components/ProfileTabs";
import TattooGallery from "./components/TattooGallery";
import FlashGallery from "./components/FlashGallery";
import FlashStatistics from "./components/FlashStatistics";
import ClientPreferences from "./components/ClientPreferences";
import ClientWishlist from "./components/ClientWishlist";
import FollowedArtists from "./components/FollowedArtists";
import ArtistRecommendations from "./components/ArtistRecommendations";
import ReviewsSection from "./components/ReviewsSection";

export default function Profil() {
  const { id: userId } = useParams();
  const { user: currentUser } = useContext(AuthContext);

  // États principaux
  const [activeTab, setActiveTab] = useState("gallery");
  const [isFollowing, setIsFollowing] = useState(false);
  const [loading, setLoading] = useState(false);
  const [isEditingBio, setIsEditingBio] = useState(false);
  const [tempBio, setTempBio] = useState("");
  const [otherUserData, setOtherUserData] = useState(null);

  // Logique pour déterminer si c'est son propre profil
  const isOwnProfile = !userId || userId === currentUser?._id;
  const displayUser = isOwnProfile ? currentUser : otherUserData;

  useEffect(() => {
    console.log("📍 Profil - userId depuis URL:", userId);
    console.log("👤 Profil - currentUser._id:", currentUser?._id);
    console.log("🏠 Profil - isOwnProfile:", isOwnProfile);
  }, [userId, currentUser, isOwnProfile]);

  // Données factices pour les clients
  const [clientPreferences] = useState({
    favoriteStyles: ["Old School", "Géométrique", "Minimaliste", "Japonais"],
    preferredLocations: ["Avant-bras", "Épaule", "Dos"],
    criteria: {
      "Hygiène du studio": 5,
      "Réputation de l'artiste": 4,
      "Prix": 3,
      "Proximité": 2,
    },
  });

  const [wishlist] = useState([
    { id: 1, artistName: "TattooArtist1", style: "Old School" },
    { id: 2, artistName: "TattooArtist2", style: "Géométrique" },
    { id: 3, artistName: "TattooArtist3", style: "Japonais" },
    { id: 4, artistName: "TattooArtist4", style: "Minimaliste" },
  ]);

  const [followedArtists] = useState([
    { id: 1, name: "TattooArtist1", specialty: "Old School" },
    { id: 2, name: "TattooArtist2", specialty: "Géométrique" },
    { id: 3, name: "TattooArtist3", specialty: "Japonais" },
  ]);

  // Chargement des données utilisateur
  useEffect(() => {
    const fetchUserData = async () => {
      if (!isOwnProfile && userId) {
        setLoading(true);
        try {
          console.log("📡 Chargement des données pour userId:", userId);
          
          const result = await getTattooerById(userId);
          
          if (result.success) {
            console.log("✅ Données utilisateur chargées:", result.data);
            setOtherUserData({
              ...result.data,
              stats: {
                followers: Math.floor(Math.random() * 2000) + 100,
                following: Math.floor(Math.random() * 500) + 10,
                tattoos: Math.floor(Math.random() * 200) + 20,
              },
              gallery: generateGallery(result.data),
              about: generateAboutSection(result.data),
            });
          } else {
            console.error("❌ Erreur lors du chargement:", result.message);
            setOtherUserData(null);
          }
        } catch (error) {
          console.error("💥 Erreur lors du fetch:", error);
          setOtherUserData(generateFallbackUserData(userId));
        } finally {
          setLoading(false);
        }
      } else {
        setTempBio(currentUser?.bio || "");
      }
    };

    fetchUserData();
  }, [userId, isOwnProfile, currentUser]);

  // Initialisation de l'onglet selon le type d'utilisateur
  useEffect(() => {
    if (displayUser) {
      if (displayUser.userType === "client" && isOwnProfile) {
        setActiveTab("preferences");
      } else {
        setActiveTab("gallery");
      }
    }
  }, [displayUser, isOwnProfile]);

  // Fonctions utilitaires pour générer les données
  const generateGallery = (userData) => {
    return [
      {
        id: 1,
        imageUrl: userData.portfolio?.[0] || "/api/placeholder/400/300",
        style: "Réalisme",
        title: "Portfolio 1",
      },
      {
        id: 2,
        imageUrl: userData.portfolio?.[1] || "/api/placeholder/400/300",
        style: "Black & Grey",
        title: "Portfolio 2",
      },
      {
        id: 3,
        imageUrl: userData.portfolio?.[2] || "/api/placeholder/400/300",
        style: "Réalisme",
        title: "Portfolio 3",
      },
      {
        id: 4,
        imageUrl: "/api/placeholder/400/300",
        style: "Portrait",
        title: "Visage femme",
      },
      {
        id: 5,
        imageUrl: "/api/placeholder/400/300",
        style: "Animal",
        title: "Loup sauvage",
      },
      {
        id: 6,
        imageUrl: "/api/placeholder/400/300",
        style: "Réalisme",
        title: "Œil humain",
      },
    ];
  };

  const generateAboutSection = (userData) => {
    return {
      experience: "Professionnel",
      specialties: userData.styles 
        ? userData.styles.split(',').map(s => s.trim()) 
        : ["Réalisme", "Portraits", "Black & Grey"],
      studio: "Studio professionnel",
      certifications: ["Hygiène et sécurité", "Formation continue 2024"],
    };
  };

  const generateFallbackUserData = (userId) => {
    return {
      _id: userId,
      nom: "Alexandre_Ink",
      userType: "tatoueur",
      photoProfil: null,
      bio: "Tatoueur professionnel spécialisé dans le réalisme et les portraits. 10 ans d'expérience.",
      localisation: "Paris, France",
      styles: "Réalisme, Portraits, Black & Grey",
      stats: {
        followers: 1234,
        following: 89,
        tattoos: 156,
      },
      gallery: [
        {
          id: 1,
          imageUrl: "/api/placeholder/400/300",
          style: "Réalisme",
          title: "Portrait réaliste",
        },
        {
          id: 2,
          imageUrl: "/api/placeholder/400/300",
          style: "Black & Grey",
          title: "Lion majestueux",
        },
        {
          id: 3,
          imageUrl: "/api/placeholder/400/300",
          style: "Réalisme",
          title: "Rose détaillée",
        },
      ],
      about: {
        experience: "10 ans",
        specialties: ["Réalisme", "Portraits", "Black & Grey"],
        studio: "Ink Masters Studio",
        certifications: ["Hygiène et sécurité", "Formation continue 2024"],
      },
    };
  };

  // Handlers pour les actions
  const handleFollow = () => {
    setIsFollowing(!isFollowing);
    toast.success(
      isFollowing
        ? "Vous ne suivez plus cet utilisateur"
        : "Vous suivez maintenant cet utilisateur"
    );
  };

  const handleSaveBio = () => {
    // Ici, vous pourriez appeler une API pour sauvegarder la bio
    toast.success("Biographie mise à jour !");
    setIsEditingBio(false);
  };

  const handleGoBack = () => {
    window.history.back();
  };

  const handlePhotoClick = () => {
    toast.info("Fonctionnalité de changement de photo à implémenter");
  };

  const handleMessageClick = () => {
    toast.info("Redirection vers la messagerie à implémenter");
  };

  const handleShareClick = () => {
    toast.info("Fonctionnalité de partage à implémenter");
  };

  const handleEditSpecialties = () => {
    toast.info("Édition des spécialités à implémenter");
  };

  const handleAddSpecialty = () => {
    toast.info("Ajout de spécialité à implémenter");
  };

  // Handlers pour la galerie
  const handleAddToGallery = () => {
    toast.info("Ajout d'image à la galerie à implémenter");
  };

  const handleEditGalleryItem = (itemId) => {
    toast.info(`Édition de l'élément ${itemId} à implémenter`);
  };

  const handleDeleteGalleryItem = (itemId) => {
    toast.info(`Suppression de l'élément ${itemId} à implémenter`);
  };

  const handleLikeGalleryItem = (itemId) => {
    toast.info(`Like de l'élément ${itemId} à implémenter`);
  };

  // Handlers pour la wishlist et les artistes suivis
  const handleWishlistItemClick = (item) => {
    toast.info(`Clic sur ${item.artistName} - ${item.style}`);
  };

  const handleUnfollowArtist = (artistId) => {
    toast.info(`Désabonnement de l'artiste ${artistId} à implémenter`);
  };

  const handleArtistClick = (artist) => {
    toast.info(`Redirection vers le profil de ${artist.name}`);
  };

  // Handlers pour les flashs
  const handleAddFlash = () => {
    toast.info("Ajout d'un nouveau flash à implémenter");
  };

  const handleEditFlash = (flashId) => {
    toast.info(`Édition du flash ${flashId} à implémenter`);
  };

  const handleDeleteFlash = (flashId) => {
    toast.info(`Suppression du flash ${flashId} à implémenter`);
  };

  const handleLikeFlash = (flashId) => {
    toast.info(`Like du flash ${flashId} à implémenter`);
  };

  const handleViewAllFlashs = () => {
    toast.info(`Redirection vers tous les flashs de ${displayUser?.nom}`);
  };

  // Handlers pour les recommandations d'artistes
  const handleFollowRecommendedArtist = (artistId) => {
    toast.info(`Suivi de l'artiste recommandé ${artistId} à implémenter`);
  };

  const handleViewRecommendedArtist = (artist) => {
    toast.info(`Redirection vers le profil de ${artist.name}`);
  };

  // Handlers pour les avis
  const handleReplyToReview = (reviewId) => {
    toast.info(`Réponse à l'avis ${reviewId} à implémenter`);
  };

  const handleLikeReview = (reviewId) => {
    toast.info(`Like de l'avis ${reviewId} à implémenter`);
  };

  // Configuration des onglets selon le type d'utilisateur
  const getAvailableTabs = () => {
    if (displayUser?.userType === "tatoueur") {
      const tabs = [{ id: "gallery", label: "Galerie" }];

      if (!isOwnProfile) {
        tabs.push(
          { id: "about", label: "À propos" },
          { id: "reviews", label: "Avis" }
        );
      }

      return tabs;
    } else {
      // Client
      if (isOwnProfile) {
        return [
          { id: "preferences", label: "Préférences" },
          { id: "gallery", label: "Wishlist" },
          { id: "followed", label: "Tatoueurs suivis" },
        ];
      } else {
        return [{ id: "gallery", label: "Wishlist" }];
      }
    }
  };

  // Rendu du contenu des onglets
  const renderTabContent = () => {
    switch (activeTab) {
      case "gallery":
        if (displayUser?.userType === "tatoueur") {
          return (
            <TattooGallery
              displayUser={displayUser}
              isOwnProfile={isOwnProfile}
              onAddClick={handleAddToGallery}
              onEditItem={handleEditGalleryItem}
              onDeleteItem={handleDeleteGalleryItem}
              onLikeItem={handleLikeGalleryItem}
            />
          );
        } else {
          return (
            <ClientWishlist
              wishlist={wishlist}
              isOwnProfile={isOwnProfile}
              onItemClick={handleWishlistItemClick}
            />
          );
        }

      case "preferences":
        return <ClientPreferences preferences={clientPreferences} />;

      case "followed":
        return (
          <FollowedArtists
            followedArtists={followedArtists}
            onUnfollowArtist={handleUnfollowArtist}
            onArtistClick={handleArtistClick}
          />
        );

      case "about":
        return (
          <div className="mb-5 space-y-4">
            <h2 className="text-xl font-bold mb-4">À propos</h2>

            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
              <div className="bg-red-400 text-white px-4 py-2 font-medium">
                Informations professionnelles
              </div>
              <div className="p-4 space-y-3">
                <div className="flex justify-between">
                  <span className="text-gray-600 dark:text-gray-400">
                    Expérience
                  </span>
                  <span className="font-medium">
                    {displayUser?.about?.experience}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600 dark:text-gray-400">
                    Studio
                  </span>
                  <span className="font-medium">
                    {displayUser?.about?.studio}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600 dark:text-gray-400">
                    Localisation
                  </span>
                  <span className="font-medium">
                    {displayUser?.localisation}
                  </span>
                </div>
              </div>
            </div>

            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
              <div className="bg-red-400 text-white px-4 py-2 font-medium">
                Spécialités
              </div>
              <div className="p-4">
                <div className="flex flex-wrap gap-2">
                  {displayUser?.about?.specialties?.map((specialty, index) => (
                    <span
                      key={index}
                      className="px-3 py-1 bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200 rounded-full text-sm"
                    >
                      {specialty}
                    </span>
                  ))}
                </div>
              </div>
            </div>

            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
              <div className="bg-red-400 text-white px-4 py-2 font-medium">
                Certifications
              </div>
              <div className="p-4">
                <ul className="space-y-2">
                  {displayUser?.about?.certifications?.map((cert, index) => (
                    <li key={index} className="flex items-center">
                      <span className="w-2 h-2 bg-green-500 rounded-full mr-3"></span>
                      {cert}
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>
        );

      case "reviews":
        return (
          <ReviewsSection
            displayUser={displayUser}
            isOwnProfile={isOwnProfile}
            userType={displayUser?.userType}
            onReplyToReview={handleReplyToReview}
            onLikeReview={handleLikeReview}
          />
        );

      default:
        return null;
    }
  };

  // États de chargement et d'erreur
  if (loading) {
    return (
      <div className="container mx-auto px-4 sm:px-6 py-8">
        <div className="flex justify-center items-center min-h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-500"></div>
          <span className="ml-3">Chargement du profil...</span>
        </div>
      </div>
    );
  }

  if (!displayUser) {
    return (
      <div className="container mx-auto px-4 sm:px-6 py-8">
        <div className="text-center">
          <h2 className="text-xl font-bold mb-4">Utilisateur introuvable</h2>
          <p className="text-gray-600 dark:text-gray-400 mb-4">
            L'utilisateur avec l'ID "{userId}" n'existe pas ou n'est plus disponible.
          </p>
          <div className="space-x-4">
            <button 
              onClick={handleGoBack}
              className="text-red-500 hover:text-red-600 transition-colors"
            >
              Retour
            </button>
            <Link 
              to="/" 
              className="text-red-500 hover:text-red-600 transition-colors"
            >
              Accueil
            </Link>
          </div>
        </div>
      </div>
    );
  }

  // Rendu principal
  return (
    <div className="container mx-auto px-4 sm:px-6 py-8">
      {/* Header avec boutons d'action */}
      <ProfileHeader
        isOwnProfile={isOwnProfile}
        currentUser={currentUser}
        onGoBack={handleGoBack}
      />

      {/* Section profil */}
      <div className="flex flex-col items-center mb-8">
        <ProfileAvatar
          displayUser={displayUser}
          isOwnProfile={isOwnProfile}
          onPhotoClick={handlePhotoClick}
        />

        <div className="flex items-center gap-2 mb-1">
          <h1 className="text-xl sm:text-2xl font-bold">
            {displayUser.nom || "Utilisateur"}
          </h1>
          {!isOwnProfile && (
            <span className="text-sm text-gray-500 dark:text-gray-400">
              (ID: {userId})
            </span>
          )}
        </div>

        {displayUser.userType === "tatoueur" && !isOwnProfile && (
          <span className="px-3 py-1 bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200 rounded-full text-sm mb-2">
            Tatoueur vérifié
          </span>
        )}

        <ProfileBio
          displayUser={displayUser}
          isOwnProfile={isOwnProfile}
          isEditingBio={isEditingBio}
          tempBio={tempBio}
          onEditClick={() => setIsEditingBio(true)}
          onBioChange={setTempBio}
          onSaveBio={handleSaveBio}
          onCancelEdit={() => {
            setIsEditingBio(false);
            setTempBio(displayUser.bio || "");
          }}
        />

        <div className="text-sm text-gray-500 dark:text-gray-400 mb-4">
          📍 {displayUser.localisation || "Non spécifié"}
        </div>

        {/* Statistiques pour les tatoueurs */}
        {displayUser.userType === "tatoueur" && (
          <ProfileStats stats={displayUser.stats} />
        )}

        <ProfileActions
          isOwnProfile={isOwnProfile}
          isFollowing={isFollowing}
          onFollowClick={handleFollow}
          onMessageClick={handleMessageClick}
          onShareClick={handleShareClick}
        />
      </div>

      {/* Spécialités pour les tatoueurs */}
      {displayUser.userType === "tatoueur" && (
        <ProfileSpecialties
          displayUser={displayUser}
          isOwnProfile={isOwnProfile}
          onEditClick={handleEditSpecialties}
          onAddClick={handleAddSpecialty}
        />
      )}

      {/* Onglets */}
      <ProfileTabs
        availableTabs={getAvailableTabs()}
        activeTab={activeTab}
        onTabChange={setActiveTab}
      />

      {/* Contenu des onglets */}
      {renderTabContent()}

      {/* Flashs disponibles pour les tatoueurs */}
      {displayUser?.userType === "tatoueur" && activeTab === "gallery" && (
        <FlashGallery
          displayUser={displayUser}
          isOwnProfile={isOwnProfile}
          onAddFlash={handleAddFlash}
          onEditFlash={handleEditFlash}
          onDeleteFlash={handleDeleteFlash}
          onLikeFlash={handleLikeFlash}
          onViewAll={handleViewAllFlashs}
        />
      )}

      {/* Statistiques des flashs pour le propriétaire */}
      {isOwnProfile && displayUser?.userType === "tatoueur" && (
        <FlashStatistics
          isOwnProfile={isOwnProfile}
          displayUser={displayUser}
        />
      )}

      {/* Recommandations d'artistes pour les clients */}
      {isOwnProfile &&
        displayUser?.userType === "client" &&
        activeTab === "followed" && (
          <ArtistRecommendations
            isOwnProfile={isOwnProfile}
            displayUser={displayUser}
            onFollowArtist={handleFollowRecommendedArtist}
            onViewArtist={handleViewRecommendedArtist}
          />
        )}
    </div>
  );
}
import React from "react";
import ArtistCard from "./ArtistCard";

const ArtistsGrid = ({
  filteredArtists,
  artists,
  isNearbyMode,
  onContact,
  onViewProfile,
  onResetFilters,
  loading,
}) => {
  if (loading) {
    return null; // Le loading est géré dans le composant parent
  }

  return (
    <div className="lg:w-3/4">
      {/* Résultats */}
      <div className="text-sm text-gray-500 mb-4">
        {filteredArtists.length}{" "}
        {filteredArtists.length === 1 ? "résultat" : "résultats"} trouvés
        {artists.length > 0 && (
          <span>
            {" "}
            sur {artists.length} artiste{artists.length > 1 ? "s" : ""}
          </span>
        )}
      </div>

      {/* Grille d'artistes */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
        {filteredArtists.map((artist) => (
          <ArtistCard
            key={artist._id}
            artist={artist}
            isNearbyMode={isNearbyMode}
            onContact={onContact}
            onViewProfile={onViewProfile}
          />
        ))}
      </div>

      {/* Message si aucun artiste trouvé */}
      {filteredArtists.length === 0 && artists.length > 0 && (
        <div className="text-center py-12 text-gray-500 bg-gray-50 rounded-lg">
          <div className="text-lg font-medium mb-2">
            Aucun artiste ne correspond à vos critères
          </div>
          <p className="text-sm mb-4">
            Essayez d'ajuster vos filtres pour voir plus de résultats
          </p>
          <button
            className="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors"
            onClick={onResetFilters}
          >
            Réinitialiser tous les filtres
          </button>
        </div>
      )}

      {/* Message si aucun artiste dans la base */}
      {artists.length === 0 && (
        <div className="text-center py-12 text-gray-500 bg-gray-50 rounded-lg">
          <div className="text-lg font-medium mb-2">
            Aucun artiste disponible pour le moment
          </div>
          <p className="text-sm mb-4">
            Revenez plus tard pour découvrir de nouveaux talents
          </p>
        </div>
      )}
    </div>
  );
};

export default ArtistsGrid;

import React from "react";
import { MapPin } from "lucide-react";

const ArtistCard = ({ artist, isNearbyMode, onContact, onViewProfile }) => {
  const formatPrice = (price) => `${price} €`;

  return (
    <div
      className="rounded-lg overflow-hidden flex flex-col shadow-lg transition-transform duration-300 hover:transform hover:scale-105 cursor-pointer"
      onClick={() => onViewProfile(artist._id)}
    >
      <div className="bg-red-400 p-3 flex items-center gap-3">
        <img
          src={artist.avatar}
          alt={artist.name}
          className="w-10 h-10 rounded-full object-cover"
          onError={(e) => {
            e.target.src = "/api/placeholder/150/150";
          }}
        />
        <div className="flex-1">
          <div className="font-bold truncate text-white">{artist.name}</div>
          <div className="text-xs text-white flex items-center">
            <MapPin size={12} className="mr-1" />
            {artist.location}
          </div>
        </div>
        <div
          className={`text-xs font-medium px-2 py-1 rounded-full ${
            artist.availability === "Disponible"
              ? "bg-green-100 text-green-800"
              : "bg-gray-100 text-gray-800"
          }`}
        >
          {artist.availability}
        </div>
      </div>

      <div className="h-48 bg-gray-200 relative">
        <img
          src={artist.portfolio}
          alt={`Portfolio de ${artist.name}`}
          className="w-full h-full object-cover"
          onError={(e) => {
            e.target.src = "/api/placeholder/400/300";
          }}
        />
        <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-3">
          <div className="flex justify-between items-center">
            <div className="text-white text-sm font-medium">
              {artist.category}
            </div>
            <div className="text-white text-sm font-bold">
              {formatPrice(artist.price)}
            </div>
          </div>
          <div className="flex items-center justify-between mt-1">
            <div className="flex items-center">
              <div className="flex">
                {[...Array(5)].map((_, i) => (
                  <span
                    key={i}
                    className={`text-xs ${
                      i < Math.floor(artist.rating)
                        ? "text-yellow-400"
                        : "text-gray-400"
                    }`}
                  >
                    ★
                  </span>
                ))}
              </div>
              <span className="text-white text-xs ml-1">{artist.rating}</span>
            </div>
            {isNearbyMode && artist.distance !== undefined && (
              <div className="text-white text-xs bg-black/50 px-2 py-1 rounded-full">
                {artist.distance.toFixed(1)} km
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="p-2">
        <button
          className="w-full py-2 bg-red-500 hover:bg-red-600 transition-colors text-white rounded-md text-sm font-medium"
          onClick={(e) => {
            e.stopPropagation();
            onContact(artist);
          }}
        >
          Prendre contact
        </button>
      </div>
    </div>
  );
};

export default ArtistCard;
